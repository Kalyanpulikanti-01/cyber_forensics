#!/usr/bin/env python3
"""
Malware Detector Module

This module provides malware detection capabilities including:
- Malicious JavaScript analysis
- Obfuscated code detection
- Drive-by download detection
- Malware signature matching
- Heuristic analysis

Owner: Samyama.ai - Vaidhyamegha Private Limited
Contact: madhulatha@samyama.ai
Website: https://Samyama.ai
License: Proprietary - All Rights Reserved
Version: 1.0.0
Last Updated: October 2025
"""

import asyncio
import json
import logging
import re
from typing import Dict, List, Optional, Any

logger = logging.getLogger(__name__)


class MalwareDetector:
    """Malware detection and analysis."""
    
    def __init__(self, config: Dict[str, Any]):
        """Initialize malware detector with configuration."""
        self.config = config
        
        # Malicious patterns
        self.malicious_patterns = [
            r'eval\s*\(\s*unescape',
            r'document\.write\s*\(\s*unescape',
            r'String\.fromCharCode',
            r'iframe.*display:\s*none',
            r'<script>.*location\.replace',
            r'window\.location\s*=.*http'
        ]
        
    async def detect_malware(self, url: str, content_data: Dict[str, Any] = None,
                            threat_intel: Dict[str, Any] = None) -> Dict[str, Any]:
        """Perform comprehensive malware detection."""
        result = {
            'url': url,
            'is_malicious': False,
            'malware_score': 0,
            'malware_types': [],
            'indicators': []
        }
        
        try:
            # Content-based detection
            if content_data:
                content_indicators = await self._check_content_malware(content_data)
                result['indicators'].extend(content_indicators)
            
            # Threat intelligence-based detection
            if threat_intel:
                threat_indicators = await self._check_threat_intel(threat_intel)
                result['indicators'].extend(threat_indicators)
            
            # Calculate malware score
            result = await self._calculate_malware_score(result)
            
        except Exception as e:
            logger.error(f"Malware detection failed: {e}")
            result['error'] = str(e)
        
        return result
    
    async def _check_content_malware(self, content_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check content for malware indicators."""
        indicators = []
        
        try:
            # Check JavaScript for malicious patterns
            js_analysis = content_data.get('javascript_analysis', {})
            
            if js_analysis.get('obfuscated_code'):
                indicators.append({
                    'type': 'malware',
                    'severity': 'high',
                    'description': 'Heavily obfuscated JavaScript detected',
                    'weight': 30
                })
            
            suspicious_funcs = js_analysis.get('suspicious_functions', [])
            if 'eval' in suspicious_funcs:
                indicators.append({
                    'type': 'malware',
                    'severity': 'high',
                    'description': 'Dangerous eval() function detected',
                    'weight': 25
                })
            
            # Check for drive-by downloads
            if content_data.get('obfuscation_detected'):
                indicators.append({
                    'type': 'malware',
                    'severity': 'high',
                    'description': 'Code obfuscation suggests malware',
                    'weight': 25
                })
            
        except Exception as e:
            logger.debug(f"Content malware check failed: {e}")
        
        return indicators
    
    async def _check_threat_intel(self, threat_intel: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Check threat intelligence for malware indicators."""
        indicators = []
        
        try:
            if threat_intel.get('is_malicious'):
                indicators.append({
                    'type': 'malware',
                    'severity': 'critical',
                    'description': 'Flagged as malicious by threat intelligence',
                    'weight': 50
                })
            
            threat_categories = threat_intel.get('threat_categories', [])
            if 'malware' in threat_categories:
                indicators.append({
                    'type': 'malware',
                    'severity': 'critical',
                    'description': 'Categorized as malware distribution',
                    'weight': 45
                })
            
        except Exception as e:
            logger.debug(f"Threat intel check failed: {e}")
        
        return indicators
    
    async def _calculate_malware_score(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """Calculate overall malware score."""
        try:
            total_score = sum(indicator.get('weight', 0) for indicator in result['indicators'])
            result['malware_score'] = min(100, total_score)
            
            if result['malware_score'] >= 50:
                result['is_malicious'] = True
                result['risk_level'] = 'critical'
            elif result['malware_score'] >= 30:
                result['is_malicious'] = False
                result['risk_level'] = 'high'
            else:
                result['risk_level'] = 'low'
            
        except Exception as e:
            logger.error(f"Malware score calculation failed: {e}")
        
        return result
